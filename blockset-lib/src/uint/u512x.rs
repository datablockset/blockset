use crate::uint::u256x::U256;

use super::u256x;

pub type U512 = [U256; 2];

#[inline(always)]
pub const fn new(a: u128, b: u128, c: u128, d: u128) -> U512 {
    [[a, b], [c, d]]
}

pub const fn get_u128(a: &U512, i: usize) -> u128 {
    a[(i >> 1) & 1][i & 1]
}

pub const fn wadd([a0, a1]: U512, [b0, b1]: U512) -> U512 {
    let (r0, c) = u256x::oadd(a0, b0);
    [r0, u256x::wadd(u256x::wadd(a1, b1), u256x::from_bool(c))]
}

pub const fn wsub([a0, a1]: U512, [b0, b1]: U512) -> U512 {
    let (r0, c) = u256x::osub(a0, b0);
    [r0, u256x::wsub(u256x::wsub(a1, b1), u256x::from_bool(c))]
}

pub const fn less([a0, a1]: U512, [b0, b1]: U512) -> bool {
    if u256x::eq(&a1, &b1) {
        u256x::less(&a0, &b0)
    } else {
        u256x::less(&a1, &b1)
    }
}

const ZERO: U512 = [u256x::ZERO, u256x::ZERO];

pub const fn leading_zeros([a0, a1]: U512) -> u32 {
    match u256x::leading_zeros(a1) {
        256 => 256 + u256x::leading_zeros(a0),
        x => x,
    }
}

pub const fn shl([lo, hi]: &U512, i: i32) -> U512 {
    [
        u256x::shl(lo, i),
        u256x::bitor(&u256x::shl(hi, i), &u256x::shl(lo, i - 256)),
    ]
}

pub const fn set_bit([a0, a1]: U512, i: u32) -> U512 {
    if i < 256 {
        [u256x::set_bit(a0, i), a1]
    } else {
        [a0, u256x::set_bit(a1, i - 256)]
    }
}

pub const fn eq([a0, a1]: &U512, [b0, b1]: &U512) -> bool {
    u256x::eq(a0, b0) && u256x::eq(a1, b1)
}

pub const fn div_rem(mut a: U512, b: U512) -> [U512; 2] {
    assert!(!eq(&b, &ZERO));
    let b_offset = leading_zeros(b);
    let mut q = ZERO;
    loop {
        let a_offset = leading_zeros(a);
        if a_offset > b_offset {
            break;
        }
        let mut offset = b_offset - a_offset;
        let mut bx = shl(&b, offset as i32);
        if less(a, bx) {
            if offset == 0 {
                break;
            }
            offset -= 1;
            bx = shl(&b, offset as i32);
        }
        a = wsub(a, bx);
        q = set_bit(q, offset);
    }
    [q, a]
}

#[cfg(test)]
mod test {
    use wasm_bindgen_test::wasm_bindgen_test;

    use crate::uint::u512x::{div_rem, wadd};

    use super::{new, U512};

    #[test]
    #[wasm_bindgen_test]
    fn test_div_rem() {
        // assert_eq!(div_rem([[0, 0], [0, 0]], [[0, 0], [0, 0]]), [[[0, 0], [0, 0]], [[0, 0], [0, 0]]]);
        assert_eq!(
            div_rem([[0, 0], [0, 0]], [[1, 0], [0, 0]]),
            [[[0, 0], [0, 0]], [[0, 0], [0, 0]]]
        );
        assert_eq!(
            div_rem([[1, 2], [3, 4]], [[1, 0], [0, 0]]),
            [[[1, 2], [3, 4]], [[0, 0], [0, 0]]]
        );
        assert_eq!(
            div_rem([[1, 2], [3, 4]], [[2, 0], [0, 0]]),
            [
                [[0, 170141183460469231731687303715884105729], [1, 2]],
                [[1, 0], [0, 0]]
            ]
        );
        assert_eq!(
            div_rem([[1, 2], [3, 4]], [[3, 0], [0, 0]]),
            [
                [
                    [0, 113427455640312821154458202477256070486],
                    [113427455640312821154458202477256070486, 1]
                ],
                [[1, 0], [0, 0]]
            ]
        );
        assert_eq!(
            div_rem([[1, 2], [3, 4]], [[3, 5], [0, 0]]),
            [
                [
                    [
                        313059777567263386386304638837226754539,
                        272225893536750770770699685945414569164
                    ],
                    [0, 0]
                ],
                [[81667768061025231231209905783624370752, 4], [0, 0]]
            ]
        );
        assert_eq!(
            div_rem([[1, 2], [3, 4]], [[3, 5], [7, 0]]),
            [
                [[194447066811964836264785489961010406546, 0], [0, 0]],
                [
                    [
                        97223533405982418132392744980505203275,
                        48611766702991209066196372490252601638
                    ],
                    [2, 0]
                ]
            ]
        );
    }

    #[test]
    #[wasm_bindgen_test]
    fn test_add() {
        assert_eq!(wadd([[0, 0], [0, 0]], [[0, 0], [0, 0]]), [[0, 0], [0, 0]]);
        assert_eq!(wadd([[1, 2], [3, 4]], [[5, 6], [7, 8]]), [[6, 8], [10, 12]]);
        assert_eq!(
            wadd([[11, 22], [33, 44]], [[55, 66], [77, 88]]),
            [[66, 88], [110, 132]]
        );
        assert_eq!(
            wadd([[1111, 2222], [3333, 4444]], [[5555, 6666], [7777, 8888]]),
            [[6666, 8888], [11110, 13332]]
        );
        assert_eq!(
            wadd(
                [[1111_1111, 2222_2222], [3333_3333, 4444_4444]],
                [[5555_5555, 6666_6666], [7777_7777, 8888_8888]]
            ),
            [[6666_6666, 8888_8888], [1_1111_1110, 1_3333_3332]]
        );
        assert_eq!(
            wadd(
                [
                    [1111_1111_1111_1111, 2222_2222_2222_2222],
                    [3333_3333_3333_3333, 4444_4444_4444_4444]
                ],
                [
                    [5555_5555_5555_5555, 6666_6666_6666_6666],
                    [7777_7777_7777_7777, 8888_8888_8888_8888]
                ]
            ),
            [
                [6666_6666_6666_6666, 8888_8888_8888_8888],
                [1_1111_1111_1111_1110, 1_3333_3333_3333_3332]
            ]
        );
        assert_eq!(
            wadd(
                [
                    [
                        1111_1111_1111_1111_1111_1111_1111_1111,
                        2222_2222_2222_2222_2222_2222_2222_2222
                    ],
                    [
                        3333_3333_3333_3333_3333_3333_3333_3333,
                        4444_4444_4444_4444_4444_4444_4444_4444
                    ]
                ],
                [
                    [
                        5555_5555_5555_5555_5555_5555_5555_5555,
                        6666_6666_6666_6666_6666_6666_6666_6666
                    ],
                    [
                        7777_7777_7777_7777_7777_7777_7777_7777,
                        8888_8888_8888_8888_8888_8888_8888_8888
                    ]
                ]
            ),
            [
                [
                    6666_6666_6666_6666_6666_6666_6666_6666,
                    8888_8888_8888_8888_8888_8888_8888_8888
                ],
                [
                    1_1111_1111_1111_1111_1111_1111_1111_1110,
                    1_3333_3333_3333_3333_3333_3333_3333_3332
                ]
            ]
        );
        assert_eq!(
            wadd(
                [
                    [
                        11_1111_1111_1111_1111_1111_1111_1111_1111_1111,
                        22_2222_2222_2222_2222_2222_2222_2222_2222_2222,
                    ],
                    [
                        33_3333_3333_3333_3333_3333_3333_3333_3333_3333,
                        44_4444_4444_4444_4444_4444_4444_4444_4444_4444,
                    ]
                ],
                [
                    [
                        55_5555_5555_5555_5555_5555_5555_5555_5555_5555,
                        66_6666_6666_6666_6666_6666_6666_6666_6666_6666,
                    ],
                    [
                        77_7777_7777_7777_7777_7777_7777_7777_7777_7777,
                        88_8888_8888_8888_8888_8888_8888_8888_8888_8888,
                    ]
                ]
            ),
            [
                [
                    66_6666_6666_6666_6666_6666_6666_6666_6666_6666,
                    88_8888_8888_8888_8888_8888_8888_8888_8888_8888
                ],
                [
                    111_1111_1111_1111_1111_1111_1111_1111_1111_1110,
                    133_3333_3333_3333_3333_3333_3333_3333_3333_3332
                ]
            ]
        );
        assert_eq!(
            wadd(
                [
                    [
                        111_1111_1111_1111_1111_1111_1111_1111_1111_1111,
                        222_2222_2222_2222_2222_2222_2222_2222_2222_2222,
                    ],
                    [
                        333_3333_3333_3333_3333_3333_3333_3333_3333_3333,
                        244_4444_4444_4444_4444_4444_4444_4444_4444_4444,
                    ]
                ],
                [
                    [
                        255_5555_5555_5555_5555_5555_5555_5555_5555_5555,
                        266_6666_6666_6666_6666_6666_6666_6666_6666_6666,
                    ],
                    [
                        277_7777_7777_7777_7777_7777_7777_7777_7777_7777,
                        288_8888_8888_8888_8888_8888_8888_8888_8888_8888,
                    ]
                ]
            ),
            [
                [
                    26_3842_9974_5728_2032_0329_2059_2348_9845_5210,
                    148_6065_2196_7950_4254_2551_4281_4571_2067_7433,
                ],
                [
                    270_8287_4419_0172_6476_4773_6503_6793_4289_9655,
                    193_0509_6641_2394_8698_6995_8725_9015_6512_1877,
                ]
            ]
        );
    }

    //#[inline(never)]
    fn create2(
        a: u128,
        b: u128,
        c: u128,
        d: u128,
        i: u128,
        f: fn(u128, u128, u128, u128) -> U512,
    ) -> U512 {
        f(a * i, b + i, c / (i + 1), d - 1)
    }

    //#[inline(never)]
    fn create(a: u128, b: u128, c: u128, d: u128) {
        for i in 0..10 {
            let x = create2(a, b, c, d, i, new);
            assert_eq!(x[0][0], a * i);
            assert_eq!(x[0][1], b + i);
            assert_eq!(x[1][0], c / (i + 1));
            assert_eq!(x[1][1], d - 1);
            let xa = new(a, b + i, c / (i + 1), d - 1);
            assert_eq!(xa[0][0], a);
            assert_eq!(xa[0][1], b + i);
            assert_eq!(xa[1][0], c / (i + 1));
            assert_eq!(xa[1][1], d - 1);
        }
    }

    #[wasm_bindgen_test]
    #[test]
    fn test() {
        create(1, 2, 3, 4);
    }
}
