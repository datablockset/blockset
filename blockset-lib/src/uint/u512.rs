use crate::uint::u256::U256;

use super::u256;

pub type U512 = [U256; 2];

pub const fn new(a: u128, b: u128, c: u128, d: u128) -> U512 {
    [[a, b], [c, d]]
}

pub const fn get_u128(a: &U512, i: usize) -> u128 {
    a[(i >> 1) & 1][i & 1]
}

pub const fn add([a0, a1]: U512, [b0, b1]: U512) -> U512 {
    let (r0, c) = u256::overflowing_add(a0, b0);
    [r0, u256::add(u256::add(a1, b1), [c as u128, 0])]
}

/// (a3 * b^3 + a2 * b^2 + a1 * b + a0) % (p1 * b + p0)
/*
pub const fn rem([a0, a1]: U512, d: U256) -> U256 {
    panic!()
}
*/

#[cfg(test)]
mod test {
    use wasm_bindgen_test::wasm_bindgen_test;

    use crate::uint::u512::add;

    use super::{new, U512};

    #[test]
    #[wasm_bindgen_test]
    fn test_add() {
        assert_eq!(add([[0, 0], [0, 0]], [[0, 0], [0, 0]]), [[0, 0], [0, 0]]);
        assert_eq!(add([[1, 2], [3, 4]], [[5, 6], [7, 8]]), [[6, 8], [10, 12]]);
        assert_eq!(
            add([[11, 22], [33, 44]], [[55, 66], [77, 88]]),
            [[66, 88], [110, 132]]
        );
        assert_eq!(
            add([[1111, 2222], [3333, 4444]], [[5555, 6666], [7777, 8888]]),
            [[6666, 8888], [11110, 13332]]
        );
        assert_eq!(
            add(
                [[1111_1111, 2222_2222], [3333_3333, 4444_4444]],
                [[5555_5555, 6666_6666], [7777_7777, 8888_8888]]
            ),
            [[6666_6666, 8888_8888], [1_1111_1110, 1_3333_3332]]
        );
        assert_eq!(
            add(
                [
                    [1111_1111_1111_1111, 2222_2222_2222_2222],
                    [3333_3333_3333_3333, 4444_4444_4444_4444]
                ],
                [
                    [5555_5555_5555_5555, 6666_6666_6666_6666],
                    [7777_7777_7777_7777, 8888_8888_8888_8888]
                ]
            ),
            [
                [6666_6666_6666_6666, 8888_8888_8888_8888],
                [1_1111_1111_1111_1110, 1_3333_3333_3333_3332]
            ]
        );
        assert_eq!(
            add(
                [
                    [
                        1111_1111_1111_1111_1111_1111_1111_1111,
                        2222_2222_2222_2222_2222_2222_2222_2222
                    ],
                    [
                        3333_3333_3333_3333_3333_3333_3333_3333,
                        4444_4444_4444_4444_4444_4444_4444_4444
                    ]
                ],
                [
                    [
                        5555_5555_5555_5555_5555_5555_5555_5555,
                        6666_6666_6666_6666_6666_6666_6666_6666
                    ],
                    [
                        7777_7777_7777_7777_7777_7777_7777_7777,
                        8888_8888_8888_8888_8888_8888_8888_8888
                    ]
                ]
            ),
            [
                [
                    6666_6666_6666_6666_6666_6666_6666_6666,
                    8888_8888_8888_8888_8888_8888_8888_8888
                ],
                [
                    1_1111_1111_1111_1111_1111_1111_1111_1110,
                    1_3333_3333_3333_3333_3333_3333_3333_3332
                ]
            ]
        );
        assert_eq!(
            add(
                [
                    [
                        11_1111_1111_1111_1111_1111_1111_1111_1111_1111,
                        22_2222_2222_2222_2222_2222_2222_2222_2222_2222,
                    ],
                    [
                        33_3333_3333_3333_3333_3333_3333_3333_3333_3333,
                        44_4444_4444_4444_4444_4444_4444_4444_4444_4444,
                    ]
                ],
                [
                    [
                        55_5555_5555_5555_5555_5555_5555_5555_5555_5555,
                        66_6666_6666_6666_6666_6666_6666_6666_6666_6666,
                    ],
                    [
                        77_7777_7777_7777_7777_7777_7777_7777_7777_7777,
                        88_8888_8888_8888_8888_8888_8888_8888_8888_8888,
                    ]
                ]
            ),
            [
                [
                    66_6666_6666_6666_6666_6666_6666_6666_6666_6666,
                    88_8888_8888_8888_8888_8888_8888_8888_8888_8888
                ],
                [
                    111_1111_1111_1111_1111_1111_1111_1111_1111_1110,
                    133_3333_3333_3333_3333_3333_3333_3333_3333_3332
                ]
            ]
        );
        assert_eq!(
            add(
                [
                    [
                        111_1111_1111_1111_1111_1111_1111_1111_1111_1111,
                        222_2222_2222_2222_2222_2222_2222_2222_2222_2222,
                    ],
                    [
                        333_3333_3333_3333_3333_3333_3333_3333_3333_3333,
                        244_4444_4444_4444_4444_4444_4444_4444_4444_4444,
                    ]
                ],
                [
                    [
                        55_5555_5555_5555_5555_5555_5555_5555_5555_5555,
                        66_6666_6666_6666_6666_6666_6666_6666_6666_6666,
                    ],
                    [
                        77_7777_7777_7777_7777_7777_7777_7777_7777_7777,
                        88_8888_8888_8888_8888_8888_8888_8888_8888_8888,
                    ]
                ]
            ),
            [
                [
                    166_6666_6666_6666_6666_6666_6666_6666_6666_6666,
                    288_8888_8888_8888_8888_8888_8888_8888_8888_8888
                ],
                [
                    70_8287_4419_0172_6476_4773_6503_6793_4289_9654,
                    333_3333_3333_3333_3333_3333_3333_3333_3333_3333
                ]
            ]
        );
    }

    //#[inline(never)]
    fn create2(
        a: u128,
        b: u128,
        c: u128,
        d: u128,
        i: u128,
        f: fn(u128, u128, u128, u128) -> U512,
    ) -> U512 {
        f(a * i, b + i, c / (i + 1), d - 1)
    }

    //#[inline(never)]
    fn create(a: u128, b: u128, c: u128, d: u128) {
        for i in 0..10 {
            let x = create2(a, b, c, d, i, new);
            assert_eq!(x[0][0], a * i);
            assert_eq!(x[0][1], b + i);
            assert_eq!(x[1][0], c / (i + 1));
            assert_eq!(x[1][1], d - 1);
            let xa = new(a, b + i, c / (i + 1), d - 1);
            assert_eq!(xa[0][0], a);
            assert_eq!(xa[0][1], b + i);
            assert_eq!(xa[1][0], c / (i + 1));
            assert_eq!(xa[1][1], d - 1);
        }
    }

    #[wasm_bindgen_test]
    #[test]
    fn test() {
        create(1, 2, 3, 4);
    }
}
